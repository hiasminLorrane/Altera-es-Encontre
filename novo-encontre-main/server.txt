const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const { Pool } = require("pg");

const app = express();
const port = 8080;

app.use(bodyParser.json());
app.use(cors());

const pool = new Pool({
  connectionString:
    "postgresql://postgres.ikjhufiucbzixzykedhr:@Tonystark19@aws-0-sa-east-1.pooler.supabase.com:6543/postgres",
  ssl: { rejectUnauthorized: false },
});

pool.connect((err) => {
  if (err) console.error("Erro ao conectar ao Supabase:", err);
  else console.log("Conectado ao Supabase");
});

/**
 * Endpoint para enviar avaliação.
 * Agora o front-end envia o nome do comércio (comercio_nome) e o servidor
 * busca o id correspondente na tabela de comercios.
 */
app.post("/rate-business", async (req, res) => {
  const { comercio_nome, nome, nota, valor_gasto, horario_pico } = req.body;

  if (!comercio_nome || !nome || !nota || !valor_gasto || !horario_pico) {
    return res
      .status(400)
      .json({ message: "Todos os campos são obrigatórios." });
  }

  try {
    // Busca o id do comércio pelo nome
    const result = await pool.query(
      `SELECT id FROM public.comercios WHERE nome = $1`,
      [comercio_nome]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Comércio não encontrado." });
    }

    const comercio_id = result.rows[0].id;

    await pool.query(
      `INSERT INTO public.ratings (comercio_id, nome, nota, valor_gasto, horario_pico)
       VALUES ($1, $2, $3, $4, $5)`,
      [comercio_id, nome, nota, valor_gasto, horario_pico]
    );

    res.status(200).json({ message: "Avaliação enviada com sucesso!" });
  } catch (err) {
    console.error("Erro ao enviar avaliação:", err);
    res.status(500).json({ message: "Erro ao enviar avaliação." });
  }
});

app.get("/business-ratings-summary", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        c.id AS comercio_id, 
        c.nome AS comercio_nome, 
        COUNT(r.id) AS total_avaliacoes, 
        COALESCE(AVG(r.nota), 0) AS nota_media, 
        COALESCE(MIN(r.valor_gasto), 0) AS menor_valor_gasto, 
        STRING_AGG(DISTINCT r.horario_pico, ', ') AS horario_pico
      FROM public.comercios c
      LEFT JOIN public.ratings r ON c.id = r.comercio_id
      GROUP BY c.id, c.nome
      ORDER BY nota_media DESC, menor_valor_gasto ASC;
    `);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Nenhum dado encontrado." });
    }

    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar resumo das avaliações:", error);
    res.status(500).json({ message: "Erro ao buscar resumo das avaliações." });
  }
});

/**
 * Endpoint para buscar comércios pelo nome e/ou categoria.
 * Se for informado somente uma categoria (diferente de "Todos"), todos os
 * comércios daquela categoria serão retornados.
 */
// Endpoint para buscar comércios pelo nome ou categoria
app.get("/search-business", async (req, res) => {
  const { nome, categoria } = req.query;

  // Verifique se algum parâmetro foi enviado
  if (!nome && categoria === "Todos") {
    return res
      .status(400)
      .json({ message: "Informe o nome ou selecione uma categoria." });
  }

  try {
    let query = "SELECT * FROM public.comercios WHERE 1=1";
    let values = [];

    // Se nome foi fornecido, adiciona à consulta
    if (nome) {
      values.push(`%${nome.trim()}%`);
      query += ` AND nome ILIKE $${values.length}`;
    }

    // Se categoria foi fornecida e não é "Todos", adiciona à consulta
    if (categoria && categoria !== "Todos") {
      values.push(`%${categoria.trim()}%`);
      query += ` AND categoria ILIKE $${values.length}`;
    }

    const result = await pool.query(query, values);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Nenhum comércio encontrado." });
    }

    res.status(200).json(result.rows);
  } catch (err) {
    console.error("Erro ao buscar comércios:", err);
    res.status(500).json({ message: "Erro ao buscar comércios." });
  }
});

/* --------------------------------------------------------------------------
   Endpoints de Usuários
-------------------------------------------------------------------------- */

// Simulação de sessão (armazenando usuários logados em memória)
const sessoes = {};

// Registrar um usuário
app.post("/api/usuarios/registro", async (req, res) => {
  const { nome, email, senha } = req.body;

  try {
    const result = await pool.query(
      "INSERT INTO usuarios (nome, email, senha) VALUES ($1, $2, $3) RETURNING id, nome, email",
      [nome, email, senha]
    );

    res.status(201).json({
      message: "Usuário registrado com sucesso!",
      user: result.rows[0],
    });
  } catch (error) {
    console.error("Erro ao registrar usuário:", error);
    res.status(500).json({ error: "Erro ao registrar usuário." });
  }
});

// Login
app.post("/api/usuarios/login", async (req, res) => {
  const { email, senha } = req.body;

  try {
    const result = await pool.query("SELECT * FROM usuarios WHERE email = $1", [
      email,
    ]);

    if (result.rows.length === 0) {
      return res.status(401).json({ error: "Usuário não encontrado." });
    }

    const usuario = result.rows[0];

    if (usuario.senha !== senha) {
      return res.status(401).json({ error: "Senha incorreta." });
    }

    // Criar uma "sessão" (simplesmente armazenando o ID do usuário)
    const token = `${usuario.id}-${Date.now()}`;
    sessoes[token] = usuario;

    res.json({ message: "Login bem-sucedido!", token });
  } catch (error) {
    console.error("Erro ao fazer login:", error);
    res.status(500).json({ error: "Erro ao fazer login." });
  }
});

// Obter dados do usuário logado
app.get("/api/usuarios/me", (req, res) => {
  const token = req.headers["authorization"];

  if (!token || !sessoes[token]) {
    return res.status(403).json({ error: "Não autorizado." });
  }

  res.json(sessoes[token]);
});

// Logout (remover sessão)
app.post("/api/usuarios/logout", (req, res) => {
  const token = req.headers["authorization"];

  if (sessoes[token]) {
    delete sessoes[token];
  }

  res.json({ message: "Logout realizado com sucesso." });
});

// Obter dados do usuário logado
app.get("/api/usuarios/me", (req, res) => {
  const token = req.headers["authorization"];

  if (!token || !sessoes[token]) {
    return res.status(403).json({ error: "Não autorizado." });
  }

  res.json(sessoes[token]);
});

// Logout (remover sessão)
app.post("/api/usuarios/logout", (req, res) => {
  const token = req.headers["authorization"];

  if (sessoes[token]) {
    delete sessoes[token];
  }

  res.json({ message: "Logout realizado com sucesso." });
});

/**
 * Endpoint para listar os comércios avaliados.
 * Junta as tabelas de comercios e ratings para retornar:
 * - Nome do comércio (comercio_nome)
 * - Nome do avaliador (avaliador_nome)
 * - Nota, valor gasto e horário de pico
 */
app.get("/get-rated-businesses", async (req, res) => {
  try {
    const result = await pool.query(
      `SELECT c.nome AS comercio_nome, 
              r.nome AS avaliador_nome, 
              r.nota, 
              r.valor_gasto, 
              r.horario_pico
       FROM public.comercios c
       JOIN public.ratings r ON c.id = r.comercio_id`
    );

    const comerciosAvaliados = result.rows;

    if (comerciosAvaliados.length === 0) {
      return res
        .status(404)
        .json({ message: "Nenhum comércio avaliado encontrado." });
    }

    res.status(200).json(comerciosAvaliados);
  } catch (err) {
    console.error("Erro ao obter comercios avaliados:", err);
    res.status(500).json({ message: "Erro ao obter comercios avaliados." });
  }
});

app.get("/search-ratings", async (req, res) => {
  let {
    comercio_nome,
    avaliador_nome,
    nota_min,
    nota_max,
    valor_min,
    valor_max,
    horario_pico,
  } = req.query;

  try {
    let query = `
        SELECT c.nome AS comercio_nome, 
               r.nome AS avaliador_nome, 
               r.nota, 
               r.valor_gasto, 
               r.horario_pico
        FROM public.comercios c
        JOIN public.ratings r ON c.id = r.comercio_id
        WHERE 1=1
      `;
    let values = [];

    // Filtros opcionais
    if (comercio_nome) {
      values.push(`%${comercio_nome.trim()}%`);
      query += ` AND c.nome ILIKE $${values.length}`;
    }

    if (avaliador_nome) {
      values.push(`%${avaliador_nome.trim()}%`);
      query += ` AND r.nome ILIKE $${values.length}`;
    }

    if (nota_min) {
      values.push(Number(nota_min));
      query += ` AND r.nota >= $${values.length}`;
    }

    if (nota_max) {
      values.push(Number(nota_max));
      query += ` AND r.nota <= $${values.length}`;
    }

    if (valor_min) {
      values.push(Number(valor_min));
      query += ` AND r.valor_gasto >= $${values.length}`;
    }

    if (valor_max) {
      values.push(Number(valor_max));
      query += ` AND r.valor_gasto <= $${values.length}`;
    }

    if (horario_pico) {
      values.push(horario_pico);
      query += ` AND r.horario_pico = $${values.length}`;
    }

    // Ordena por nota (maiores primeiro) e depois por valor gasto
    query += ` ORDER BY r.nota DESC, r.valor_gasto DESC LIMIT 50`;

    const result = await pool.query(query, values);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Nenhuma avaliação encontrada." });
    }

    res.status(200).json(result.rows);
  } catch (err) {
    console.error("Erro ao buscar avaliações:", err);
    res.status(500).json({ message: "Erro ao buscar avaliações." });
  }
});

// Endpoint para exibir todos os dados de um comércio
app.get("/get-business-details", async (req, res) => {
  const { nome, id } = req.query;

  let query = "SELECT * FROM public.comercios WHERE 1=1";
  let params = [];

  // Verifica se o nome ou ID foi fornecido
  if (nome) {
    query += " AND nome ILIKE $1"; // ILIKE para busca case-insensitive
    params.push(`%${nome}%`);
  }
  if (id) {
    query += " AND id = $2";
    params.push(id);
  }

  try {
    const result = await pool.query(query, params);
    if (result.rows.length > 0) {
      res.json(result.rows[0]); // Retorna o primeiro comércio encontrado
    } else {
      res.status(404).json({ message: "Comércio não encontrado." });
    }
  } catch (error) {
    console.error("Erro ao buscar dados do comércio:", error);
    res.status(500).json({ message: "Erro ao buscar dados do comércio." });
  }
});

// Endpoint 1: Menor preço por negócio (com categoria) do menor para o maior
app.get("/lowest-price-by-category", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        c.categoria, 
        c.nome AS comercio_nome, 
        MIN(r.valor_gasto) AS menor_valor_gasto
      FROM public.comercios c
      JOIN public.ratings r ON c.id = r.comercio_id
      GROUP BY c.categoria, c.nome
      ORDER BY menor_valor_gasto ASC;
    `);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Nenhum dado encontrado." });
    }

    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar o menor preço por categoria:", error);
    res
      .status(500)
      .json({ message: "Erro ao buscar o menor preço por categoria." });
  }
});

// Endpoint 2: Melhor horário de pico para cada comércio (baseado no menor valor_gasto)
app.get("/best-peak-hour-per-business", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT DISTINCT ON (c.id) 
        c.nome AS comercio_nome, 
        c.categoria, 
        r.horario_pico, 
        r.valor_gasto
      FROM public.comercios c
      JOIN public.ratings r ON c.id = r.comercio_id
      ORDER BY c.id, r.valor_gasto ASC;
    `);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Nenhum dado encontrado." });
    }

    res.status(200).json(result.rows);
  } catch (error) {
    console.error(
      "Erro ao buscar o melhor horário de pico por comércio:",
      error
    );
    res.status(500).json({
      message: "Erro ao buscar o melhor horário de pico por comércio.",
    });
  }
});

app.get("/all-businesses-details", async (req, res) => {
  try {
    const result = await pool.query(`
SELECT 
  c.id AS comercio_id,
  c.nome AS comercio_nome,
  c.cidade,
  c.endereco,
  COUNT(r.id) AS total_avaliacoes,
  COALESCE(AVG(r.nota), 0) AS nota_media,
  CASE WHEN COUNT(r.id) > 0 THEN MIN(r.valor_gasto) ELSE NULL END AS menor_valor_gasto,
  (
    SELECT STRING_AGG(r2.horario_pico, ', ')
    FROM (
      SELECT r2.horario_pico
      FROM public.ratings r2
      WHERE r2.comercio_id = c.id
      ORDER BY r2.created_at DESC
      LIMIT 2
    ) AS r2
  ) AS horario_pico,
  MAX(r.valor_gasto) AS preco,
  (
    SELECT r3.horario_pico 
    FROM public.ratings r3 
    WHERE r3.comercio_id = c.id 
    ORDER BY r3.created_at DESC 
    LIMIT 1
  ) AS hora
FROM public.comercios c
LEFT JOIN public.ratings r ON c.id = r.comercio_id
GROUP BY c.id, c.nome, c.cidade, c.endereco
ORDER BY nota_media DESC, menor_valor_gasto ASC;

    `);

    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar detalhes de todos os comercios:", error);
    res
      .status(500)
      .json({ message: "Erro ao buscar detalhes de todos os comercios." });
  }
});

// Endpoint para obter ranking dos avaliadores (usuários que mais fizeram avaliações)
app.get("/all-users-details", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        nome AS usuario_nome, 
        COUNT(id) AS total_avaliacoes
      FROM public.ratings
      GROUP BY nome
      ORDER BY total_avaliacoes DESC;
    `);
    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar dados dos usuários:", error);
    res.status(500).json({ message: "Erro ao buscar dados dos usuários." });
  }
});

app.get("/top-three-businesses", async (req, res) => {
  try {
    const query = `
      SELECT 
        c.id AS comercio_id,
        c.nome AS comercio_nome,
        COUNT(r.id) AS total_avaliacoes,
        COALESCE(AVG(r.nota), 0) AS nota_media,
        CASE WHEN COUNT(r.id) > 0 THEN MIN(r.valor_gasto) ELSE NULL END AS menor_valor_gasto,
        STRING_AGG(r.horario_pico, ', ') AS horario_pico
      FROM public.comercios c
      LEFT JOIN public.ratings r ON c.id = r.comercio_id
      GROUP BY c.id, c.nome
      ORDER BY nota_media DESC, menor_valor_gasto ASC
      LIMIT 3;
    `;
    const result = await pool.query(query);

    if (result.rows.length === 0) {
      return res
        .status(404)
        .json({ message: "Nenhum comércio avaliado encontrado." });
    }

    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar os top 3 comércios:", error);
    res.status(500).json({ message: "Erro ao buscar os top 3 comércios." });
  }
});

app.post("/add-fuel-price", async (req, res) => {
  const { nome, endereco, cidade, estado, tipo_combustivel, preco } = req.body;

  if (!nome || !endereco || !cidade || !estado || !tipo_combustivel || !preco) {
    return res
      .status(400)
      .json({ message: "Todos os campos são obrigatórios." });
  }

  try {
    await pool.query(
      `INSERT INTO postos_combustivel (nome, endereco, cidade, estado, tipo_combustivel, preco)
       VALUES ($1, $2, $3, $4, $5, $6)`,
      [nome, endereco, cidade, estado, tipo_combustivel, preco]
    );
    res.status(201).json({ message: "Posto cadastrado com sucesso!" });
  } catch (err) {
    console.error("Erro ao cadastrar posto:", err);
    res.status(500).json({ message: "Erro ao cadastrar posto." });
  }
});

// Endpoint para editar o nome e o preço de um posto
app.put("/fuel-station/:id", async (req, res) => {
  const { id } = req.params;
  let { nome, preco } = req.body;

  if (!nome || !preco) {
    return res.status(400).json({ message: "Nome e preço são obrigatórios." });
  }

  // Converter vírgula para ponto, se necessário, e garantir que o valor seja numérico
  preco = parseFloat(preco.toString().replace(",", "."));
  if (isNaN(preco)) {
    return res.status(400).json({ message: "Preço inválido." });
  }

  try {
    const result = await pool.query(
      "UPDATE postos_combustivel SET nome = $1, preco = $2 WHERE id = $3 RETURNING *",
      [nome, preco, id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Registro não encontrado." });
    }

    res.status(200).json({
      message: "Posto atualizado com sucesso.",
      registro: result.rows[0],
    });
  } catch (error) {
    console.error("Erro ao atualizar o posto:", error);
    res.status(500).json({ message: "Erro ao atualizar o posto." });
  }
});

app.get("/fuel-prices", async (req, res) => {
  const { cidade, estado } = req.query; // Extrai os parâmetros 'cidade' e 'estado' da query

  try {
    // Query condicional: se cidade e estado são fornecidos, filtra por esses valores
    let query = `
      SELECT id, nome, endereco, cidade, estado, tipo_combustivel, preco
      FROM postos_combustivel
    `;

    const queryParams = [];

    if (cidade) {
      query += " WHERE cidade = $1";
      queryParams.push(cidade);
    }

    if (estado) {
      if (queryParams.length > 0) {
        query += " AND estado = $2";
      } else {
        query += " WHERE estado = $1";
      }
      queryParams.push(estado);
    }

    query += " ORDER BY preco ASC;";

    const result = await pool.query(query, queryParams);
    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar preços:", error);
    res.status(500).json({ message: "Erro ao buscar preços." });
  }
});

// Endpoint para editar somente o valor (preço) de um posto
app.put("/fuel-price/:id", async (req, res) => {
  const { id } = req.params;
  const { preco } = req.body;

  if (!preco) {
    return res.status(400).json({ message: "O novo valor é obrigatório." });
  }

  try {
    const result = await pool.query(
      "UPDATE postos_combustivel SET preco = $1 WHERE id = $2 RETURNING *",
      [preco, id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Registro não encontrado." });
    }

    res.status(200).json({
      message: "Valor atualizado com sucesso.",
      registro: result.rows[0],
    });
  } catch (error) {
    console.error("Erro ao atualizar o valor:", error);
    res.status(500).json({ message: "Erro ao atualizar o valor." });
  }
});

// Endpoint para listar todos os postos de combustível com preços ordenados do mais barato ao mais caro
app.get("/all-fuel-stations", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT 
        nome, 
        endereco, 
        tipo_combustivel, 
        preco
      FROM postos_combustivel
      ORDER BY preco ASC;
    `);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Nenhum posto encontrado." });
    }

    res.status(200).json(result.rows);
  } catch (error) {
    console.error("Erro ao buscar postos de combustível:", error);
    res.status(500).json({ message: "Erro ao buscar postos de combustível." });
  }
});

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`);
});
